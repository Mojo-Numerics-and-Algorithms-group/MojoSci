from testing import *
from stochasticity import *


# Comparison values generated by xoroshiro128p.c
def test_xoshiro256plus():
    var rng = Xoshiro256Plus(123456789)
    assert_equal(rng.next(), 2900770601708847547)
    rng.jump()
    assert_equal(rng.next(), 9825254035844351470)
    rng.long_jump()
    assert_equal(rng.next(), 14870607449358761693)


def test_xoshiro256plusplus():
    var rng = Xoshiro256PlusPlus(123456789)
    assert_equal(rng.next(), 17529267607630649700)
    rng.jump()
    assert_equal(rng.next(), 12875214395480348985)
    rng.long_jump()
    assert_equal(rng.next(), 4309701940339973257)


def test_xoshiro256starstar():
    var rng = Xoshiro256StarStar(123456789)
    assert_equal(rng.next(), 9459031947683160080)
    rng.jump()
    assert_equal(rng.next(), 10792938499345859092)
    rng.long_jump()
    assert_equal(rng.next(), 135534716287837558)


def test_xoshiro256ParallelPlusPlus():
    var seed: UInt64 = 123
    var rng_par = Xoshiro256PlusPlusSIMD[4](seed)
    var rng1 = Xoshiro256PlusPlus(seed)
    var rng2 = Xoshiro256PlusPlus(seed)
    var rng3 = Xoshiro256PlusPlus(seed)
    var rng4 = Xoshiro256PlusPlus(seed)
    rng2.long_jump()
    rng3.long_jump()
    rng3.long_jump()
    rng4.long_jump()
    rng4.long_jump()
    rng4.long_jump()
    rng_par.step()
    rng1.step()
    rng2.step()
    rng3.step()
    rng4.step()
    rng_par.step()
    rng1.step()
    rng2.step()
    rng3.step()
    rng4.step()
    assert_equal(rng_par.s0[0], rng1.s0)
    assert_equal(rng_par.s1[0], rng1.s1)
    assert_equal(rng_par.s2[0], rng1.s2)
    assert_equal(rng_par.s3[0], rng1.s3)
    assert_equal(rng_par.s0[1], rng2.s0)
    assert_equal(rng_par.s1[1], rng2.s1)
    assert_equal(rng_par.s2[1], rng2.s2)
    assert_equal(rng_par.s3[1], rng2.s3)
    assert_equal(rng_par.s0[2], rng3.s0)
    assert_equal(rng_par.s1[2], rng3.s1)
    assert_equal(rng_par.s2[2], rng3.s2)
    assert_equal(rng_par.s3[2], rng3.s3)
    assert_equal(rng_par.s0[3], rng4.s0)
    assert_equal(rng_par.s1[3], rng4.s1)
    assert_equal(rng_par.s2[3], rng4.s2)
    assert_equal(rng_par.s3[3], rng4.s3)
    rng_par.step()
    rng1.step()
    rng2.step()
    rng3.step()
    rng4.step()
    assert_equal(rng_par.s0[0], rng1.s0)
    assert_equal(rng_par.s1[0], rng1.s1)
    assert_equal(rng_par.s2[0], rng1.s2)
    assert_equal(rng_par.s3[0], rng1.s3)
    assert_equal(rng_par.s0[1], rng2.s0)
    assert_equal(rng_par.s1[1], rng2.s1)
    assert_equal(rng_par.s2[1], rng2.s2)
    assert_equal(rng_par.s3[1], rng2.s3)
    assert_equal(rng_par.s0[2], rng3.s0)
    assert_equal(rng_par.s1[2], rng3.s1)
    assert_equal(rng_par.s2[2], rng3.s2)
    assert_equal(rng_par.s3[2], rng3.s3)
    assert_equal(rng_par.s0[3], rng4.s0)
    assert_equal(rng_par.s1[3], rng4.s1)
    assert_equal(rng_par.s2[3], rng4.s2)
    assert_equal(rng_par.s3[3], rng4.s3)
